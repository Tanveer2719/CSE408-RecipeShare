
'use client'
import React, { useState, useEffect } from 'react';
import Image from 'next/image';
import { useParams } from 'next/navigation';

interface ApiRecipeResponse {
  id: number;
  title: string;
  description: string;
  cooking_time: string;
  ingredients: {
    amount: number;
    unit: string;
    ingredient: string;

  }[];
  image: string;      // Optional image field
  publication_date: string;
  last_modification_date: string;
  tags: string[];
  ratings: number;
  user: {
    name: string;
    // Add other user-related fields based on your User model
  };
  steps: {
    // Assuming image is an array of strings based on your JSON structure
    order: number;
    step: string;
    image: string;
  }[];
  comments: {
    id: number;
    text: string;
    date: string;
    user: number;  // Assuming user is a user ID
  }[];
}

const Recipe = () => {

  const [recipeData, setRecipeData] = useState<ApiRecipeResponse | null>(null);
  const [completedSteps, setCompletedSteps] = useState<number[]>([]);
  const markStepAsDone = (stepIndex: number) => {
    setCompletedSteps([...completedSteps, stepIndex]);
  };


  const { id: recipeId } = useParams(); // Destructure the id property
  console.log(recipeId); // Output: '12'
  //const router = useRouter();
  //const { recipeId } = router.query;


  useEffect(() => {

    const fetchData = async () => {

      console.log(recipeId);
      try {
        const response = await fetch('https://recipeshare-tjm7.onrender.com/api/recipe/get/', {
          method: 'POST',
          headers: {
            //Authorization: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJhcjEzNzM3NUBnbWFpbC5jb20iLCJleHAiOjE3MDYzMjY4MTMsImlhdCI6MTcwNjMyMzIxM30.xLX9HeailgdxCvDqcRsUGvctctH6rDnWpPpiDmTLbUs',
          },
          body: JSON.stringify({ 'recipe_id': recipeId?.toString() || '' }),
        });
        const data: ApiRecipeResponse = await response.json();
        console.log(data);
        setRecipeData(data);
      } catch (error) {
        console.error('Error fetching recipe data:', error);
      }
    };

    fetchData();
  }, []); // The empty dependency array ensures that the effect runs once when the component mounts



  if (!recipeData) {
    return <div>Loading...</div>; // You might want to add a loading state
  }
  // State for managing the new comment
  // const [newComment, setNewComment] = useState('');//////must add
  const newComment = '';


  // Function to handle adding a new comment
  const handleAddComment = () => {
    // Implement your logic for adding a new comment here
    console.log('Adding comment:', newComment);
    // Clear the comment input
    //setNewComment('');//////must add
  };

  // Function to transform numerical ratings to stars
  // StarRating component
  const StarRating = (rating: number) => {
    const stars = [];
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 !== 0;

    // Add full stars
    for (let i = 0; i < fullStars; i++) {
      stars.push(<span key={i}>★</span>);
    }

    // Add half star if applicable
    if (hasHalfStar) {
      stars.push(<span key="half">½</span>);
    }

    return <div className="flex">{stars}</div>;
  };

  
  const percentageComplete = Math.round((completedSteps.length / recipeData.steps.length) * 100);

  return (
    <div className="p-4 lg:px-20 xl:px-40">
      {/* IMAGE AND TITLE */}
      {recipeData.image && (
        <div className="relative w-full h-1/3 md:h-1/2 lg:w-1/2">
          <Image
            src={recipeData.image}
            alt=""
            className="object-cover"
            layout="responsive"
            height="100"
            width="100"
          />
        </div>
      )}
      <h1 className="text-3xl font-bold uppercase xl:text-5xl mt-4">{recipeData.title}</h1>

      {/* USER INFO */}
      <div className="text-gray-500">
        <p>By {recipeData.user.name}</p>
        <p>Cooking Time {recipeData.cooking_time} minutes</p>
      </div>

      {/* TAGS */}
      <div className="mt-4">
        <p className="text-lg text-indigo-500 font-bold mb-2">Tags:</p>
        <p className="text-lg text-red-500">{recipeData.tags.join(', ')}</p>
      </div>

      {/* SUMMARY */}
      <div className="mt-8 bg-gray-100 p-4 rounded-md">
        <h2 className="text-2xl font-bold mb-2">Description</h2>
        <p className="font-serif text-lg italic">{recipeData.description}</p>
      </div>

      {/* INGREDIENTS */}
      {/* INGREDIENTS */}
      <div className="mt-8">
        <h2 className="text-2xl font-bold mb-2">Ingredients</h2>
        <ul className="list-disc pl-4">
          {recipeData.ingredients.map((ingredientGroup, index) => (
            <li key={index}>
              {`${ingredientGroup.amount} ${ingredientGroup.unit} of ${ingredientGroup.ingredient}`}
            </li>
          ))}
        </ul>
      </div>


      {/* INSTRUCTIONS */}
      <div className="mt-8">
        <h2 className="text-2xl font-bold mb-2">Instructions</h2>
        <ol className="list-decimal pl-4">
          {recipeData.steps.map((step, index) => (
            <li key={index} className="mb-4">
              <span className="block">{`${step.step}`}</span>
              {step.image && (
                <div className="w-16 h-16 mx-6 mt-2">
                  <Image
                    src={step.image}
                    alt={`Step ${index + 1}`}
                    className="object-cover"
                    layout="responsive"
                    width={100}
                    height={100}
                  />
                </div>
              )}
              {!completedSteps.includes(index) && (
                <button
                  className="bg-blue-500 text-white px-4 py-1 rounded mt-2"
                  onClick={() => markStepAsDone(index)}
                >
                  Mark as Done
                </button>
              )}
            </li>
          ))}
        </ol>
        <div className="mt-4">
          <div className="bg-gray-300 h-4 rounded-full">
            <div className="bg-blue-500 h-full rounded-full" style={{ width: `${percentageComplete}%` }}></div>
          </div>
          <p className="text-xs text-gray-600 mt-1">{percentageComplete}% Complete</p>
        </div>
      </div>


      {/* ADD COMMENT FORM */}
      <div className="mt-8">
        <h2 className="text-2xl font-bold mb-4">Add a Comment</h2>
        <textarea
          className="w-full p-2 border rounded-md"
          placeholder="Type your comment here..."
          value={newComment}
        />
        <button
          className="mt-2 px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600"
          onClick={handleAddComment}
        >
          Add Comment
        </button>
      </div>
    </div>
  );



};

export default Recipe;
